#!/bin/bash

# CHECK PYTHON 3
if command -v python3 &>/dev/null; then
   echo Python3 available
else
   echo Python3 not available, please install it or add to the PATH variable
   exit 1
fi

# CHECK PIP
if command -v python3 -m pip &>/dev/null; then
   echo Pip available
else
   echo Pip not available, please install it or add to the PATH variable
   exit 1
fi

# CHECK VIRTUALENV COMMAND
if command -v python3 -m venv &>/dev/null; then
   echo Venv command available
else
   echo Venv not available, please install it [For example: python3 -m pip install python-venv]
   exit 1
fi


COMMAND=$1
PYTHON_VERSION=3
# CHECK VENV NOT EXISTS
if [ ! -d .venv ]; then
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            --python-version) PYTHON_VERSION="$2"; shift ;;
            *) COMMAND=$1; break ;;
        esac
        shift
    done

    python3 -m venv .venv
    .venv/bin/pip3 install -r requirements.txt
    .venv/bin/pip3 install -r test-requirements.txt
fi

if [ -f '.buildew' ]; then
	echo Use .buildew file to read sensitive information
	while IPS='=' read -r key value; do
        #echo $key, $value
		#key=$(echo $key | tr '.' '_')
		#eval ${key}=\${value::1}
        eval ${key}
	done < '.buildew'
else
    # REGENERATE SENSITIVE INFO FROM TEMPLATE
    cat >'.buildew'<< EOF
AWS_ACCOUNT=1234567.dkr.ecr.us-east-2.amazonaws.com
AWS_PROFILE=devops.user
AWS_REGION=us-east-2

EOF
fi


echo EXECUTE
echo =========== $COMMAND
echo $COMMAND ===========
echo COMMAND

if [ "x$COMMAND" == "xbuild" ]; then
    CURRENT_FOLDER=$PWD
    cd demo1
    flutter build web
    cd $CURRENT_FOLDER
    tar -cf demo1.flutter -C demo1/build/web .

    echo 'Build docker image'
    mkdir -p .prebuild
    cp -fr ~/.demo1 .prebuild
    docker build -t demo1/demo1:v1 .
    rm -fr .prebuild
fi

if [ "x$COMMAND" == "xdev" ]; then
    echo 'Start application for development'
    CURRENT_FOLDER=$PWD
    ps -Fe | grep demo1.api.demo1 | awk ' { print $2 } ' | xargs kill -9
    $(.venv/bin/python3 -m demo1.api.demo1 -p 8080 || exit 1) &
    cd $CURRENT_FOLDER
    cd demo1
    flutter build web || exit 1
    flutter run -d chrome
    cd $CURRENT_FOLDER
fi

if [ "x$COMMAND" == "xrun" ]; then
    echo 'Run docker image'
    docker container rm demo1
    docker run -p 80 -l demo1 --name demo1 demo1/demo1:v1
fi

if [ "x$COMMAND" == "xstop" ]; then
    echo 'Stop docker image'
    docker kill demo1
fi

# TESTS
# venv/bin/python -m unittest discover -s ./tests -p 'test_*.py' -t . -b --locals -v

if [ "x$COMMAND" == "xdeploy" ]; then
    echo Deploy docker image to the AWS
    echo I\'ll use account: $AWS_ACCOUNT \(like: 1234567.dkr.ecr.us-east-2.amazonaws.com\)
    echo AWS_PROFILE is $AWS_PROFILE
    echo AWS_REGION is $AWS_REGION
    aws ecr get-login-password --profile $AWS_PROFILE --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT
    mkdir -p .prebuild
    cp -fr ~/.demo1 .prebuild
    docker build -t demo1 .
    rm -fr .prebuild
    docker tag demo1:latest $AWS_ACCOUNT/demo1:latest
    docker push $AWS_ACCOUNT/demo1:latest

    echo Deploy monitor lambda to the AWS
    echo AWS_PROFILE is $AWS_PROFILE
    echo AWS_REGION is $AWS_REGION
    CURRENT_FOLDER=$PWD
    cd monitor
    AWS_PROFILE=$AWS_PROFILE sls deploy --profile $AWS_PROFILE --region $AWS_REGION
    cd $CURRENT_FOLDER
fi


AVAILABLE_COMMANDS="build run stop deploy dev"
echo ''
[[ $AVAILABLE_COMMANDS =~ (^| )$COMMAND($| ) ]] && echo 'Ok' || echo 'Unknown command: ' "$COMMAND" && echo 'Available commands are: ' "$AVAILABLE_COMMANDS"

